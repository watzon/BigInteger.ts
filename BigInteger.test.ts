import {
  assertEquals,
  AssertionError,
} from "https://deno.land/std@0.101.0/testing/asserts.ts";
import { diffstr } from "https://deno.land/std@0.101.0/testing/_diff.ts";
import { BigInteger, BigNumber, bigInt } from "./mod.ts";

let a = "1234567890",
  b = a + a + a + a + a + a + a + a + a + a,
  c = b + b + b + b + b + b + b + b + b + b,
  d = c + c + c + c + c + c + c + c + c + c,
  e = d + d + d;

function assertEqualsBigInt(actual: BigNumber, expected: BigNumber) {
  actual = bigInt(actual);
  expected = bigInt(expected);
  if (!actual.equals(expected)) {
    const diffResult = diffstr(actual.toString(), expected.toString());
    const message = `Values are not equal:\n${diffResult}`;
    throw new AssertionError(message);
  }
}

function assertNotEqualsBigInt(actual: BigNumber, expected: BigNumber) {
  actual = bigInt(actual);
  expected = bigInt(expected);
  if (actual.equals(expected)) {
    const message = `Values are not equal:\nExpected: ${expected.toString()}\nActual: ${actual.toString()}`;
    throw new AssertionError(message);
  }
}

Deno.test("BigInteger can handle large numbers", () => {
  const tenFactorial = "3628800",
    hundredFactorial =
      "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000",
    threeToTenThousand =
      "16313501853426258743032567291811547168121324535825379939348203261918257308143190787480155630847848309673252045223235795433405582999177203852381479145368112501453192355166224391025423628843556686559659645012014177448275529990373274425446425751235537341867387607813619937225616872862016504805593174059909520461668500663118926911571773452255850626968526251879139867085080472539640933730243410152186914328917354576854457274195562218013337745628502470673059426999114202540773175988199842487276183685299388927825296786440252999444785694183675323521704432195785806270123388382931770198990841300861506996108944782065015163410344894945809337689156807686673462563038164792190665340124344133980763205594364754963451564072340502606377790585114123814919001637177034457385019939060232925194471114235892978565322415628344142184842892083466227875760501276009801530703037525839157893875741192497705300469691062454369926795975456340236777734354667139072601574969834312769653557184396147587071260443947944862235744459711204473062937764153770030210332183635531818173456618022745975055313212598514429587545547296534609597194836036546870491771927625214352957503454948403635822345728774885175809500158451837389413798095329711993092101417428406774326126450005467888736546254948658602484494535938888656542746977424368385335496083164921318601934977025095780370104307980276356857350349205866078371806065542393536101673402017980951598946980664330391505845803674248348878071010412918667335823849899623486215050304052577789848512410263834811719236949311423411823585316405085306164936671137456985394285677324771775046050970865520893596151687017153855755197348199659070192954771308347627111052471134476325986362838585959552209645382089055182871854866744633737533217524880118401787595094060855717010144087136495532418544241489437080074716158404895914136451802032446707961058757633345691696743293869623745410870051851590672859347061212573446572045088465460616826082579731686004585218284333452396157730036306379421822435818001505905203918209206969662326706952623512427380240468784114535101496733983401240219840048956733689309620321613793757156727562461651933397540266795963865921590913322060572673349849253303397874242381960775337182730037783698708748781738419747698880321601186310506332869704931303076839444790968339306301273371014087248060946851793697973114432706759288546077622831002526800554849696867710280945946603669593797354642136622231192695027321229511912952940320879763123151760555959496961163141455688278842949587288399100273691880018774147568892650186152065335219113072582417699616901995530249937735219099786758954892534365835235843156112799728164123461219817343904782402517111603206575330527850752564642995318064985900815557979945885931124351303252811255254295797082281946658798705979077492469849644183166585950844953164726896146168297808178398470451561320526180542310840744843107469368959707726836608471817060598771730170755446473440774031371227437651048421606224757527085958515947273151027400662948161111284777828103531499488913672800783167888051177155427285103861736658069404797695900758820465238673970882660162285107599221418743657006872537842677883708807515850397691812433880561772652364847297019508025848964833883225165668986935081274596293983121864046277268590401580209059988500511262470167150495261908136688693861324081559046336288963037090312033522400722360882494928182809075406914319957044927504420797278117837677431446979085756432990753582588102440240611039084516401089948868433353748444104639734074519165067632941419347985624435567342072815910754484123812917487312938280670403228188813003978384081332242484646571417574404852962675165616101527367425654869508712001788393846171780457455963045764943565964887518396481296159902471996735508854292964536796779404377230965723361625182030798297734785854606060323419091646711138678490928840107449923456834763763114226000770316931243666699425694828181155048843161380832067845480569758457751090640996007242018255400627276908188082601795520167054701327802366989747082835481105543878446889896230696091881643547476154998574015907396059478684978574180486798918438643164618541351689258379042326487669479733384712996754251703808037828636599654447727795924596382283226723503386540591321268603222892807562509801015765174359627788357881606366119032951829868274617539946921221330284257027058653162292482686679275266764009881985590648534544939224296689791195355783205968492422636277656735338488299104238060289209390654467316291591219712866052661347026855261289381236881063068219249064767086495184176816629077103667131505064964190910450196502178972477361881300608688593782509793781457170396897496908861893034634895715117114601514654381347139092345833472226493656930996045016355808162984965203661519182202145414866559662218796964329217241498105206552200001";
  function factorial(n: BigInteger): BigInteger {
    if (n.equals(BigInteger.zero) || n.equals(BigInteger.one)) {
      return BigInteger.one;
    }
    return factorial(n.prev()).times(n);
  }
  assertEqualsBigInt(factorial(bigInt(10)), tenFactorial);
  assertEqualsBigInt(factorial(bigInt(100)), hundredFactorial);
  assertEqualsBigInt(bigInt(3).pow(10000), threeToTenThousand);
});

Deno.test("BigInteger is immutable", () => {
  const n = bigInt(14930352);
  n.add(9227465);
  assertEqualsBigInt(n, 14930352);
  n.subtract(123456);
  assertEqualsBigInt(n, 14930352);
});

Deno.test("works for positive numbers", () => {
  assertEqualsBigInt(BigInteger.one, 1);
  assertNotEqualsBigInt(1, 2);
  assertNotEqualsBigInt(0, 1);
  assertEqualsBigInt(987, 987);
  assertNotEqualsBigInt(987, 789);
  assertNotEqualsBigInt(7895, 9875);
  assertEqualsBigInt("98765432101234567890", "98765432101234567890");
  assertNotEqualsBigInt("98765432101234567890", "98765432101234567999");
  assertNotEqualsBigInt("98765432101234567890", "98765432101234567000");

  assertEquals(bigInt(54).greater(45), true);
  assertEquals(bigInt(45).greater(54), false);
  assertEquals(bigInt(45).greater(45), false);
  assertEquals(bigInt("5498765432109876").greater("4598765432109876"), true);
  assertEquals(bigInt("4598765432109876").greater("5498765432109876"), false);
  assertEquals(bigInt("4598765432109876").greater("4598765432109876"), false);

  assertEquals(bigInt(32).greaterOrEquals(23), true);
  assertEquals(bigInt(23).greaterOrEquals(32), false);
  assertEquals(bigInt(23).greaterOrEquals(23), true);
  assertEquals(
    bigInt("3298763232109876").greaterOrEquals("2398763232109876"),
    true
  );
  assertEquals(
    bigInt("2398763232109876").greaterOrEquals("3298763232109876"),
    false
  );
  assertEquals(
    bigInt("2398763232109876").greaterOrEquals("2398763232109876"),
    true
  );

  assertEquals(bigInt(987).lesser(789), false);
  assertEquals(bigInt(789).lesser(987), true);
  assertEquals(bigInt(789).lesser(789), false);
  assertEquals(
    bigInt("987987698732109876").lesser("789987698732109876"),
    false
  );
  assertEquals(bigInt("789987698732109876").lesser("987987698732109876"), true);
  assertEquals(
    bigInt("789987698732109876").lesser("789987698732109876"),
    false
  );

  assertEquals(bigInt(6012).lesserOrEquals(1195), false);
  assertEquals(bigInt(1195).lesserOrEquals(6012), true);
  assertEquals(bigInt(1195).lesserOrEquals(1195), true);
  assertEquals(
    bigInt("6012987660126012109876").lesserOrEquals("1195987660126012109876"),
    false
  );
  assertEquals(
    bigInt("1195987660126012109876").lesserOrEquals("6012987660126012109876"),
    true
  );
  assertEquals(
    bigInt("1195987660126012109876").lesserOrEquals("1195987660126012109876"),
    true
  );

  assertEquals(bigInt(54).notEquals(45), true);
  assertEquals(bigInt(45).notEquals(54), true);
  assertEquals(bigInt("5498765432109876").notEquals("4598765432109876"), true);
  assertEquals(bigInt("4598765432109876").notEquals("5498765432109876"), true);
  assertEquals(bigInt("4598765432109876").notEquals("4598765432109876"), false);

  assertEqualsBigInt(
    "306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000",
    "306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000"
  );
  assertEqualsBigInt("234345345345", "234345345345");
  assertEqualsBigInt("1230000000", "1230000000");
});

Deno.test("BigInteger works for negative numbers", () => {
  assertEqualsBigInt(BigInteger.minusOne, -1);
  assertNotEqualsBigInt(-1, -2);
  assertNotEqualsBigInt(-0, -1);
  assertEqualsBigInt(-987, -987);
  assertNotEqualsBigInt(-987, -789);
  assertNotEqualsBigInt(-7895, -9875);
  assertEqualsBigInt("-98765432101234567890", "-98765432101234567890");
  assertNotEqualsBigInt("-98765432101234567890", "-98765432101234567999");
  assertNotEqualsBigInt("-98765432101234567890", "-98765432101234567000");

  assertEquals(bigInt(-54).greater(-45), false);
  assertEquals(bigInt(-45).greater(-54), true);
  assertEquals(bigInt(-45).greater(-45), false);
  assertEquals(bigInt(45).greater("-549876540654065065132109876"), true);
  assertEquals(bigInt(-45).greater("-549876540654065065132109876"), true);
  assertEquals(bigInt(45).greater("549876540654065065132109876"), false);
  assertEquals(bigInt(-45).greater("549876540654065065132109876"), false);
  assertEquals(bigInt("-5498765432109876").greater("-4598765432109876"), false);
  assertEquals(bigInt("-4598765432109876").greater("-5498765432109876"), true);
  assertEquals(bigInt("-4598765432109876").greater("-4598765432109876"), false);

  assertEquals(bigInt(-32).greaterOrEquals(-23), false);
  assertEquals(bigInt(-23).greaterOrEquals(-32), true);
  assertEquals(bigInt(-23).greaterOrEquals(-23), true);
  assertEquals(
    bigInt("-3298763232109876").greaterOrEquals("-2398763232109876"),
    false
  );
  assertEquals(
    bigInt("-2398763232109876").greaterOrEquals("-3298763232109876"),
    true
  );
  assertEquals(
    bigInt("-2398763232109876").greaterOrEquals("-2398763232109876"),
    true
  );

  assertEquals(bigInt(-987).lesser(-789), true);
  assertEquals(bigInt(-789).lesser(-987), false);
  assertEquals(bigInt(-789).lesser(-789), false);
  assertEquals(bigInt("-987987698732109876").lesser(82), true);
  assertEquals(bigInt("-987987698732109876").lesser(-82), true);
  assertEquals(
    bigInt("-987987698732109876").lesser("-789987698732109876"),
    true
  );
  assertEquals(
    bigInt("-789987698732109876").lesser("-987987698732109876"),
    false
  );
  assertEquals(
    bigInt("-789987698732109876").lesser("-789987698732109876"),
    false
  );

  assertEquals(bigInt(-6012).lesserOrEquals(-1195), true);
  assertEquals(bigInt(-1195).lesserOrEquals(-6012), false);
  assertEquals(bigInt(-1195).lesserOrEquals(-1195), true);
  assertEquals(
    bigInt("-6012987660126012109876").lesserOrEquals("-1195987660126012109876"),
    true
  );
  assertEquals(
    bigInt("-1195987660126012109876").lesserOrEquals("-6012987660126012109876"),
    false
  );
  assertEquals(
    bigInt("-1195987660126012109876").lesserOrEquals("-1195987660126012109876"),
    true
  );

  assertEquals(bigInt(-54).notEquals(-45), true);
  assertEquals(bigInt(-45).notEquals(-54), true);
  assertEquals(bigInt(-45).notEquals(-45), false);
  assertEquals(
    bigInt("-5498765432109876").notEquals("-4598765432109876"),
    true
  );
  assertEquals(
    bigInt("-4598765432109876").notEquals("-5498765432109876"),
    true
  );
  assertEquals(
    bigInt("-4598765432109876").notEquals("-4598765432109876"),
    false
  );

  assertEqualsBigInt(bigInt("-1"), "-1");
  assertEqualsBigInt(bigInt("-10000000000000000"), "-10000000000000000");
});

Deno.test("BigInteger treats negative and positive numbers differently", () => {
  assertNotEqualsBigInt(54, -54);
  assertNotEqualsBigInt("-123456789876543210", "123456789876543210");
  assertEquals(bigInt(76).notEquals(-76), true);

  assertEquals(bigInt(2).greater(-2), true);
  assertEquals(bigInt(-2).greater(2), false);
  assertEquals(bigInt(2).greater(-3), true);
  assertEquals(bigInt(2).greater(-1), true);
  assertEquals(bigInt(-2).greater(3), false);
  assertEquals(bigInt(-2).greater(1), false);

  assertEquals(bigInt(2).greaterOrEquals(-2), true);
  assertEquals(bigInt(-2).greaterOrEquals(2), false);
  assertEquals(bigInt(2).greaterOrEquals(-3), true);
  assertEquals(bigInt(2).greaterOrEquals(-1), true);
  assertEquals(bigInt(-2).greaterOrEquals(3), false);
  assertEquals(bigInt(-2).greaterOrEquals(1), false);

  assertEquals(bigInt(2).lesser(-2), false);
  assertEquals(bigInt(-2).lesser(2), true);
  assertEquals(bigInt(2).lesser(-3), false);
  assertEquals(bigInt(2).lesser(-1), false);
  assertEquals(bigInt(-2).lesser(3), true);
  assertEquals(bigInt(-2).lesser(1), true);

  assertEquals(bigInt(2).lesserOrEquals(-2), false);
  assertEquals(bigInt(-2).lesserOrEquals(2), true);
  assertEquals(bigInt(2).lesserOrEquals(-3), false);
  assertEquals(bigInt(2).lesserOrEquals(-1), false);
  assertEquals(bigInt(-2).lesserOrEquals(3), true);
  assertEquals(bigInt(-2).lesserOrEquals(1), true);
});

Deno.test(
  "BigInt.compareAbs treats negative and positive numbers the same",
  () => {
    assertEquals(bigInt(0).compareAbs(36), -1);
    assertEquals(bigInt(0).compareAbs(-36), -1);
    assertEquals(bigInt(36).compareAbs(5), 1);
    assertEquals(bigInt(36).compareAbs(-5), 1);
    assertEquals(bigInt(-36).compareAbs(5), 1);
    assertEquals(bigInt(-36).compareAbs(-5), 1);
    assertEquals(bigInt(5).compareAbs(36), -1);
    assertEquals(bigInt(5).compareAbs(-36), -1);
    assertEquals(bigInt(-5).compareAbs(36), -1);
    assertEquals(bigInt(-5).compareAbs(-36), -1);
    assertEquals(bigInt(36).compareAbs(36), 0);
    assertEquals(bigInt(36).compareAbs(-36), 0);
    assertEquals(bigInt(-36).compareAbs(36), 0);
    assertEquals(bigInt(-36).compareAbs(-36), 0);

    assertEquals(bigInt(0).compareAbs("9999999999999999999"), -1);
    assertEquals(bigInt(0).compareAbs("-9999999999999999999"), -1);
    assertEquals(
      bigInt("9999999999999999999").compareAbs("55555555555555555"),
      1
    );
    assertEquals(
      bigInt("9999999999999999999").compareAbs("-55555555555555555"),
      1
    );
    assertEquals(
      bigInt("-9999999999999999999").compareAbs("55555555555555555"),
      1
    );
    assertEquals(
      bigInt("-9999999999999999999").compareAbs("-55555555555555555"),
      1
    );
    assertEquals(
      bigInt("55555555555555555").compareAbs("9999999999999999999"),
      -1
    );
    assertEquals(
      bigInt("55555555555555555").compareAbs("-9999999999999999999"),
      -1
    );
    assertEquals(
      bigInt("-55555555555555555").compareAbs("9999999999999999999"),
      -1
    );
    assertEquals(
      bigInt("-55555555555555555").compareAbs("-9999999999999999999"),
      -1
    );
    assertEquals(
      bigInt("9999999999999999999").compareAbs("9999999999999999999"),
      0
    );
    assertEquals(
      bigInt("9999999999999999999").compareAbs("-9999999999999999999"),
      0
    );
    assertEquals(
      bigInt("-9999999999999999999").compareAbs("9999999999999999999"),
      0
    );
    assertEquals(
      bigInt("-9999999999999999999").compareAbs("-9999999999999999999"),
      0
    );
  }
);

Deno.test("BigInteger treats 0 and -0 the same", () => {
  assertEqualsBigInt(0, "-0");
  assertEqualsBigInt(BigInteger.zero, "-0");
});

Deno.test("BigInteger ignores leading zeros", () => {
  assertEqualsBigInt("0000000000", "0");
  assertEqualsBigInt("000000000000023", 23);
  assertEqualsBigInt(bigInt("-0000000000000000000000123"), "-123");
});

Deno.test(
  "BigInteger treats numbers constructed different ways the same",
  () => {
    // assertEqualsBigInt("12e5", 12e5); FIXME
    assertEqualsBigInt(12e5, "1200000");
    assertEqualsBigInt("1", 1);
    assertEqualsBigInt(bigInt(12345), "12345");
    assertEqualsBigInt(bigInt("9876543210"), bigInt(9876543210));
  }
);

Deno.test("BigInteger allows Infinity and -Infinity", () => {
  // See issue #61
  // https://github.com/peterolson/BigInteger.js/issues/61
  assertEquals(bigInt(56).lesser(Infinity), true);
  assertEquals(bigInt(56).greater(-Infinity), true);
  //   assertEquals(bigInt("50e50").lesser(Infinity), true); FIXME
  //   assertEquals(bigInt("50e50").greater(-Infinity), true); FIXME
});

Deno.test("BigInteger by 0 is the identity", () => {
  assertEqualsBigInt(bigInt(1).add(0), 1);
  assertEqualsBigInt(bigInt(-1).add(0), -1);
  assertEqualsBigInt(bigInt(0).add(-1), -1);
  assertEqualsBigInt(bigInt(0).add(153), 153);
  assertEqualsBigInt(bigInt(153).add(0), 153);
  assertEqualsBigInt(bigInt(0).add(-153), -153);
  assertEqualsBigInt(bigInt(-153).add(0), -153);
  assertEqualsBigInt(
    bigInt(0).add("9844190321790980841789"),
    "9844190321790980841789"
  );
  assertEqualsBigInt(
    bigInt("9844190321790980841789").add(0),
    "9844190321790980841789"
  );
  assertEqualsBigInt(
    bigInt(0).add("-9844190321790980841789"),
    "-9844190321790980841789"
  );
  assertEqualsBigInt(
    bigInt("-9844190321790980841789").add(0),
    "-9844190321790980841789"
  );

  assertEqualsBigInt(bigInt(1).minus(0), 1);
  assertEqualsBigInt(bigInt(-1).minus(0), -1);
  assertEqualsBigInt(bigInt(153).minus(0), 153);
  assertEqualsBigInt(bigInt(-153).minus(0), -153);
  assertEqualsBigInt(
    bigInt("9844190321790980841789").minus(0),
    "9844190321790980841789"
  );
  assertEqualsBigInt(
    bigInt("-9844190321790980841789").minus(0),
    "-9844190321790980841789"
  );
});

Deno.test(
  "BigInteger addition by inverse is 0, subtraction by self is 0",
  () => {
    assertEqualsBigInt(bigInt("5").subtract(bigInt("5")), 0);
    assertEqualsBigInt(bigInt("5").add(bigInt("-5")), 0);
    assertEqualsBigInt(
      bigInt("10000000000000000").subtract(bigInt("10000000000000000")),
      0
    );
    assertEqualsBigInt(
      bigInt("10000000000000000").add(bigInt("-10000000000000000")),
      0
    );
  }
);

Deno.test("handles signs correctly", () => {
  assertEqualsBigInt(bigInt(1).add(1), 2);
  assertEqualsBigInt(bigInt(1).add(-5), -4);
  assertEqualsBigInt(bigInt(-1).add(5), 4);
  assertEqualsBigInt(bigInt(-1).add(-5), -6);
  assertEqualsBigInt(bigInt(5).add(1), 6);
  assertEqualsBigInt(bigInt(5).add(-1), 4);
  assertEqualsBigInt(bigInt(-5).add(1), -4);
  assertEqualsBigInt(bigInt(-5).add(-1), -6);

  assertEqualsBigInt(bigInt(1).minus(1), 0);
  assertEqualsBigInt(bigInt(1).minus(-5), 6);
  assertEqualsBigInt(bigInt(-1).minus(5), -6);
  assertEqualsBigInt(bigInt(-1).minus(-5), 4);
  assertEqualsBigInt(bigInt(5).minus(1), 4);
  assertEqualsBigInt(bigInt(5).minus(-1), 6);
  assertEqualsBigInt(bigInt(-5).minus(1), -6);
  assertEqualsBigInt(bigInt(-5).minus(-1), -4);

  assertEqualsBigInt(bigInt("1234698764971301").add(5), "1234698764971306");
  assertEqualsBigInt(bigInt("1234698764971301").add(-5), "1234698764971296");
  assertEqualsBigInt(bigInt("-1234698764971301").add(5), "-1234698764971296");
  assertEqualsBigInt(bigInt("-1234698764971301").add(-5), "-1234698764971306");
  assertEqualsBigInt(bigInt(5).add("1234698764971301"), "1234698764971306");
  assertEqualsBigInt(bigInt(5).add("-1234698764971301"), "-1234698764971296");
  assertEqualsBigInt(bigInt(-5).add("1234698764971301"), "1234698764971296");
  assertEqualsBigInt(bigInt(-5).add("-1234698764971301"), "-1234698764971306");

  assertEqualsBigInt(bigInt("1234698764971301").minus(5), "1234698764971296");
  assertEqualsBigInt(bigInt("1234698764971301").minus(-5), "1234698764971306");
  assertEqualsBigInt(bigInt("-1234698764971301").minus(5), "-1234698764971306");
  assertEqualsBigInt(
    bigInt("-1234698764971301").minus(-5),
    "-1234698764971296"
  );
  assertEqualsBigInt(bigInt(5).minus("1234698764971301"), "-1234698764971296");
  assertEqualsBigInt(bigInt(5).minus("-1234698764971301"), "1234698764971306");
  assertEqualsBigInt(bigInt(-5).minus("1234698764971301"), "-1234698764971306");
  assertEqualsBigInt(bigInt(-5).minus("-1234698764971301"), "1234698764971296");

  assertEqualsBigInt(
    bigInt("1234567890987654321").plus("9876543210123456789"),
    "11111111101111111110"
  );
  assertEqualsBigInt(
    bigInt("1234567890987654321").plus("-9876543210123456789"),
    "-8641975319135802468"
  );
  assertEqualsBigInt(
    bigInt("-1234567890987654321").plus("9876543210123456789"),
    "8641975319135802468"
  );
  assertEqualsBigInt(
    bigInt("-1234567890987654321").plus("-9876543210123456789"),
    "-11111111101111111110"
  );
  assertEqualsBigInt(
    bigInt("9876543210123456789").plus("1234567890987654321"),
    "11111111101111111110"
  );
  assertEqualsBigInt(
    bigInt("9876543210123456789").plus("-1234567890987654321"),
    "8641975319135802468"
  );
  assertEqualsBigInt(
    bigInt("-9876543210123456789").plus("1234567890987654321"),
    "-8641975319135802468"
  );
  assertEqualsBigInt(
    bigInt("-9876543210123456789").plus("-1234567890987654321"),
    "-11111111101111111110"
  );

  assertEqualsBigInt(
    bigInt("1234567890987654321").minus("9876543210123456789"),
    "-8641975319135802468"
  );
  assertEqualsBigInt(
    bigInt("1234567890987654321").minus("-9876543210123456789"),
    "11111111101111111110"
  );
  assertEqualsBigInt(
    bigInt("-1234567890987654321").minus("9876543210123456789"),
    "-11111111101111111110"
  );
  assertEqualsBigInt(
    bigInt("-1234567890987654321").minus("-9876543210123456789"),
    "8641975319135802468"
  );
  assertEqualsBigInt(
    bigInt("9876543210123456789").minus("1234567890987654321"),
    "8641975319135802468"
  );
  assertEqualsBigInt(
    bigInt("9876543210123456789").minus("-1234567890987654321"),
    "11111111101111111110"
  );
  assertEqualsBigInt(
    bigInt("-9876543210123456789").minus("1234567890987654321"),
    "-11111111101111111110"
  );
  assertEqualsBigInt(
    bigInt("-9876543210123456789").minus("-1234567890987654321"),
    "-8641975319135802468"
  );

  assertEquals(
    bigInt("-9007199254740991").add(bigInt("-1")).toString() ===
      "-9007199254740992",
    true
  );
  assertEquals(
    bigInt("-5616421592529327000000000000000")
      .minus("987682355516543")
      .toString() === "-5616421592529327987682355516543",
    true
  );

  assertEqualsBigInt(
    bigInt("0").negate().add("10000000000000000"),
    "10000000000000000"
  );
  assertEqualsBigInt(bigInt("0").negate().add(bigInt("-1")), "-1");
});

Deno.test("BigInteger carries over correctly", () => {
  // Fibonacci; see issue #9
  //   https://github.com/peterolson/BigInteger.js/issues/9
  const fibs = [
    "1",
    "1",
    "2",
    "3",
    "5",
    "8",
    "13",
    "21",
    "34",
    "55",
    "89",
    "144",
    "233",
    "377",
    "610",
    "987",
    "1597",
    "2584",
    "4181",
    "6765",
    "10946",
    "17711",
    "28657",
    "46368",
    "75025",
    "121393",
    "196418",
    "317811",
    "514229",
    "832040",
    "1346269",
    "2178309",
    "3524578",
    "5702887",
    "9227465",
    "14930352",
    "24157817",
    "39088169",
    "63245986",
    "102334155",
    "165580141",
    "267914296",
    "433494437",
    "701408733",
    "1134903170",
    "1836311903",
    "2971215073",
    "4807526976",
    "7778742049",
    "12586269025",
  ];
  let number = bigInt(1);
  let last = bigInt(1);

  for (let i = 2; i < 50; i++) {
    number = number.add(last);
    last = number.minus(last);
    assertEqualsBigInt(number, fibs[i]);
  }

  assertEquals(
    bigInt("9007199254740991").add(bigInt("1")).toString(),
    "9007199254740992"
  );
  //   assertEqualsBigInt(
  //     bigInt("999999999999999999999000000000000000000000").add(
  //       "1000000000000000000000"
  //     ),
  //     "1e42"
  //   );
  //   assertEqualsBigInt(
  //     bigInt("1e20").add("9007199254740972"),
  //     "100009007199254740972"
  //   ); FIXME
  assertEquals(
    bigInt("-9007199254740983").add(bigInt("-9999999999999998")).toString() ===
      "-19007199254740981",
    true
  ); // issue #42

  assertEqualsBigInt(
    bigInt(c).minus(bigInt(b).next()),
    "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678899999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
  );
  assertEqualsBigInt(
    bigInt(b).minus(bigInt(c).next()),
    "-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"
  );
  assertEqualsBigInt(
    bigInt("100000000000000000000000000000000000").minus("999999999999999999"),
    "99999999999999999000000000000000001"
  );

  assertEqualsBigInt(
    bigInt("10000000010000000").subtract("10000000"),
    "10000000000000000"
  ); // issue #54
});

Deno.test("BigInteger work", () => {
  assertEqualsBigInt(bigInt("10").add("10"), "20");
  assertEqualsBigInt(
    bigInt("-10000000000000000").add("0"),
    "-10000000000000000"
  );

  assertEqualsBigInt(bigInt(9999999).add(1), 10000000);
  assertEqualsBigInt(bigInt(10000000).minus(1), 9999999);
  assertEqualsBigInt(
    bigInt("-1000000000000000000000000000000000001").add(
      "1000000000000000000000000000000000000"
    ),
    -1
  );
  assertEqualsBigInt(
    bigInt("100000000000000000002222222222222222222").minus(
      "100000000000000000001111111111111111111"
    ),
    "1111111111111111111"
  );
  assertEqualsBigInt(bigInt("1").add("0"), "1");
  assertEqualsBigInt(
    bigInt("10").add("10000000000000000"),
    "10000000000000010"
  );
  assertEqualsBigInt(
    bigInt("10000000000000000").add("10"),
    "10000000000000010"
  );
  assertEqualsBigInt(
    bigInt("10000000000000000").add("10000000000000000"),
    "20000000000000000"
  );
});
